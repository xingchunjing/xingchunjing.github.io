const n=JSON.parse(`{"key":"v-4df5a28e","path":"/fragment/log-create.html","title":"Log日志","lang":"zh-CN","frontmatter":{"icon":"layout","date":"2023-08-09T00:00:00.000Z","category":["java","后端"],"tag":["log","java","后端"],"star":true,"description":"Log日志 在完成日常任务时，有时候需要根据不同的目的，自己定制化完成log日志的输出，通过配置文件实现日志输出存在一定的局限性，可以通过代码来，定制化实现下面的目标 自定义日志文件输出目录 自定义日志文件名称格式 自定义日志文件输出间隔 自定义日志内容输出格式 ... 配置文件 package com.game.server.config; import java.text.SimpleDateFormat; import java.time.OffsetDateTime; import java.time.ZoneOffset; import java.time.format.DateTimeFormatter; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import org.apache.commons.lang3.StringUtils; import org.apache.log4j.FileAppender; import org.apache.log4j.Level; import org.apache.log4j.Logger; import org.apache.log4j.PatternLayout; import org.apache.log4j.varia.LevelRangeFilter; public class LoggerFactory { // 防止频繁创建Logger对象 private static volatile Map&lt;String, List&lt;Object&gt;&gt; logMap = new ConcurrentHashMap&lt;String, List&lt;Object&gt;&gt;(); public static Logger getLogger(String baseDir, String appId, String type) { SimpleDateFormat formatter = new SimpleDateFormat(\\"'_'yyyyMMdd\\"); String date = formatter.format(new Date()); if (StringUtils.isEmpty(baseDir) || StringUtils.isEmpty(appId)) { throw new IllegalArgumentException(\\"cannot be empty\\"); } // 防止map过大不按时间存储{ key: [date_A, logger_A] } String key = baseDir + \\"/\\" + appId + \\"/gameserver_\\" + appId + \\"_\\" + type; List&lt;Object&gt; list = logMap.get(key); if (list == null) { // 存储新数据 try { Logger logger = createLogger(key, type, date); return logger; } catch (Exception e) { e.printStackTrace(); } } // 比较时间 String saveDate = String.valueOf(list.get(0)); if (saveDate.equals(date)) { Logger logger = (Logger) list.get(1); return logger; } else { try { // 更新数据 Logger logger = createLogger(key, type, date); return logger; } catch (Exception e) { e.printStackTrace(); } } return null; } /** * 添加同步锁，并进行双端校验，防止重复创建 * * @param key * @param type * @param date * @return */ private synchronized static Logger createLogger(String key, String type, String date) { // 双端检索，防止重复创建 List&lt;Object&gt; list = logMap.get(key); if (list != null) { String saveDate = String.valueOf(list.get(0)); if (saveDate.equals(date)) { Logger logger = (Logger) list.get(1); return logger; } } String logFilePath = key + date; // 添加Appender到日志记录器 Logger logger = Logger.getLogger(\\"com.game.server.config.LoggerFactory.\\" + type + date); FileAppender appender = new FileAppender(); // 设置输出文件名 appender.setFile(logFilePath); // 设置输出格式 appender.setLayout(new PatternLayout(\\"%m%n\\")); // 设置Appender的阈值级别 appender.setThreshold(Level.INFO); appender.activateOptions(); LevelRangeFilter filterInfo = new LevelRangeFilter(); filterInfo.setLevelMin(Level.INFO); filterInfo.setLevelMax(Level.ERROR); appender.addFilter(filterInfo); logger.addAppender(appender); list = new ArrayList&lt;&gt;(); list.add(date); list.add(logger); logMap.put(key, list); return logger; } }","head":[["meta",{"property":"og:url","content":"https://gitee.com/jing-xingchun/fragment/log-create.html"}],["meta",{"property":"og:site_name","content":"Jingxc"}],["meta",{"property":"og:title","content":"Log日志"}],["meta",{"property":"og:description","content":"Log日志 在完成日常任务时，有时候需要根据不同的目的，自己定制化完成log日志的输出，通过配置文件实现日志输出存在一定的局限性，可以通过代码来，定制化实现下面的目标 自定义日志文件输出目录 自定义日志文件名称格式 自定义日志文件输出间隔 自定义日志内容输出格式 ... 配置文件 package com.game.server.config; import java.text.SimpleDateFormat; import java.time.OffsetDateTime; import java.time.ZoneOffset; import java.time.format.DateTimeFormatter; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import org.apache.commons.lang3.StringUtils; import org.apache.log4j.FileAppender; import org.apache.log4j.Level; import org.apache.log4j.Logger; import org.apache.log4j.PatternLayout; import org.apache.log4j.varia.LevelRangeFilter; public class LoggerFactory { // 防止频繁创建Logger对象 private static volatile Map&lt;String, List&lt;Object&gt;&gt; logMap = new ConcurrentHashMap&lt;String, List&lt;Object&gt;&gt;(); public static Logger getLogger(String baseDir, String appId, String type) { SimpleDateFormat formatter = new SimpleDateFormat(\\"'_'yyyyMMdd\\"); String date = formatter.format(new Date()); if (StringUtils.isEmpty(baseDir) || StringUtils.isEmpty(appId)) { throw new IllegalArgumentException(\\"cannot be empty\\"); } // 防止map过大不按时间存储{ key: [date_A, logger_A] } String key = baseDir + \\"/\\" + appId + \\"/gameserver_\\" + appId + \\"_\\" + type; List&lt;Object&gt; list = logMap.get(key); if (list == null) { // 存储新数据 try { Logger logger = createLogger(key, type, date); return logger; } catch (Exception e) { e.printStackTrace(); } } // 比较时间 String saveDate = String.valueOf(list.get(0)); if (saveDate.equals(date)) { Logger logger = (Logger) list.get(1); return logger; } else { try { // 更新数据 Logger logger = createLogger(key, type, date); return logger; } catch (Exception e) { e.printStackTrace(); } } return null; } /** * 添加同步锁，并进行双端校验，防止重复创建 * * @param key * @param type * @param date * @return */ private synchronized static Logger createLogger(String key, String type, String date) { // 双端检索，防止重复创建 List&lt;Object&gt; list = logMap.get(key); if (list != null) { String saveDate = String.valueOf(list.get(0)); if (saveDate.equals(date)) { Logger logger = (Logger) list.get(1); return logger; } } String logFilePath = key + date; // 添加Appender到日志记录器 Logger logger = Logger.getLogger(\\"com.game.server.config.LoggerFactory.\\" + type + date); FileAppender appender = new FileAppender(); // 设置输出文件名 appender.setFile(logFilePath); // 设置输出格式 appender.setLayout(new PatternLayout(\\"%m%n\\")); // 设置Appender的阈值级别 appender.setThreshold(Level.INFO); appender.activateOptions(); LevelRangeFilter filterInfo = new LevelRangeFilter(); filterInfo.setLevelMin(Level.INFO); filterInfo.setLevelMax(Level.ERROR); appender.addFilter(filterInfo); logger.addAppender(appender); list = new ArrayList&lt;&gt;(); list.add(date); list.add(logger); logMap.put(key, list); return logger; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-09T07:57:08.000Z"}],["meta",{"property":"article:author","content":"Jingxc"}],["meta",{"property":"article:tag","content":"log"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:published_time","content":"2023-08-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-09T07:57:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Log日志\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-09T07:57:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jingxc\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[{"level":3,"title":"配置介绍","slug":"配置介绍","link":"#配置介绍","children":[]}]},{"level":2,"title":"日志使用","slug":"日志使用","link":"#日志使用","children":[]}],"git":{"createdTime":1691567828000,"updatedTime":1691567828000,"contributors":[{"name":"Jingxc","email":"2584982513@qq.com","commits":1}]},"readingTime":{"minutes":2.53,"words":759},"filePathRelative":"fragment/log-create.md","localizedDate":"2023年8月9日","excerpt":"<h1> Log日志</h1>\\n<p>在完成日常任务时，有时候需要根据不同的目的，自己定制化完成log日志的输出，通过配置文件实现日志输出存在一定的局限性，可以通过代码来，定制化实现下面的目标</p>\\n<ul>\\n<li>自定义日志文件输出目录</li>\\n<li>自定义日志文件名称格式</li>\\n<li>自定义日志文件输出间隔</li>\\n<li>自定义日志内容输出格式\\n...</li>\\n</ul>\\n<h2> 配置文件</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>game<span class=\\"token punctuation\\">.</span>server<span class=\\"token punctuation\\">.</span>config</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">SimpleDateFormat</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">OffsetDateTime</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ZoneOffset</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">.</span>format<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DateTimeFormatter</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ArrayList</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Date</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">List</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Map</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ConcurrentHashMap</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>commons<span class=\\"token punctuation\\">.</span>lang3<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">StringUtils</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>log4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">FileAppender</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>log4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Level</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>log4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Logger</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>log4j<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">PatternLayout</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>log4j<span class=\\"token punctuation\\">.</span>varia<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">LevelRangeFilter</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LoggerFactory</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token comment\\">// 防止频繁创建Logger对象</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">volatile</span> <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">List</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> logMap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConcurrentHashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">List</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Logger</span> <span class=\\"token function\\">getLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> baseDir<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> appId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> type<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token class-name\\">SimpleDateFormat</span> formatter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SimpleDateFormat</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"'_'yyyyMMdd\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">String</span> date <span class=\\"token operator\\">=</span> formatter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span>baseDir<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span>appId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"cannot be empty\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 防止map过大不按时间存储{ key: [date_A, logger_A] }</span>\\n        <span class=\\"token class-name\\">String</span> key <span class=\\"token operator\\">=</span> baseDir <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/\\"</span> <span class=\\"token operator\\">+</span> appId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/gameserver_\\"</span> <span class=\\"token operator\\">+</span> appId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"_\\"</span> <span class=\\"token operator\\">+</span> type<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> logMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>list <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 存储新数据</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n\\n                <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createLogger</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> logger<span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 比较时间</span>\\n        <span class=\\"token class-name\\">String</span> saveDate <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">valueOf</span><span class=\\"token punctuation\\">(</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>saveDate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Logger</span><span class=\\"token punctuation\\">)</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> logger<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 更新数据</span>\\n                <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createLogger</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">,</span> date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> logger<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 添加同步锁，并进行双端校验，防止重复创建\\n     * \\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">key</span>\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">type</span>\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">date</span>\\n     * <span class=\\"token keyword\\">@return</span>\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">synchronized</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Logger</span> <span class=\\"token function\\">createLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> type<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> date<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token comment\\">// 双端检索，防止重复创建</span>\\n        <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> logMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>list <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">String</span> saveDate <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">valueOf</span><span class=\\"token punctuation\\">(</span>list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>saveDate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Logger</span><span class=\\"token punctuation\\">)</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> logger<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token class-name\\">String</span> logFilePath <span class=\\"token operator\\">=</span> key <span class=\\"token operator\\">+</span> date<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 添加Appender到日志记录器</span>\\n        <span class=\\"token class-name\\">Logger</span> logger <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Logger</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"com.game.server.config.LoggerFactory.\\"</span> <span class=\\"token operator\\">+</span> type <span class=\\"token operator\\">+</span> date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">FileAppender</span> appender <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileAppender</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 设置输出文件名</span>\\n        appender<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setFile</span><span class=\\"token punctuation\\">(</span>logFilePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 设置输出格式</span>\\n        appender<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setLayout</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PatternLayout</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%m%n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 设置Appender的阈值级别</span>\\n        appender<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setThreshold</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Level</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">INFO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        appender<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">activateOptions</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">LevelRangeFilter</span> filterInfo <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LevelRangeFilter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        filterInfo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setLevelMin</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Level</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">INFO</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        filterInfo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setLevelMax</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Level</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ERROR</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        appender<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addFilter</span><span class=\\"token punctuation\\">(</span>filterInfo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addAppender</span><span class=\\"token punctuation\\">(</span>appender<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>date<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>logger<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        logMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">return</span> logger<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
