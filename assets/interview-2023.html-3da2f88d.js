import{_ as p,X as o,Y as l,Z as c,$ as n,a0 as e,a1 as t,a2 as a,E as i}from"./framework-f01f539c.js";const u={},r=a(`<h1 id="_2023面试题" tabindex="-1"><a class="header-anchor" href="#_2023面试题" aria-hidden="true">#</a> 2023面试题</h1><h2 id="_1-java-oop面试题" tabindex="-1"><a class="header-anchor" href="#_1-java-oop面试题" aria-hidden="true">#</a> 1. JAVA OOP面试题</h2><h3 id="_1-1-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" tabindex="-1"><a class="header-anchor" href="#_1-1-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" aria-hidden="true">#</a> 1.1 short s1 = 1; s1 = s1 + 1;有错吗? short s1 = 1; s1 += 1; 有错吗？</h3><hr><div class="hint-container tip"><p class="hint-container-title">提示</p><p>赋值表达式等号两侧的转换的规则是右侧的向左侧的看齐，即右侧表达式要转换到和左边的类型一样。</p></div><p>short s1 = 1; s1 = s1 + 1;错！ s1 + 1，s1是short类型，1是int型，s1会自动转换为int型的1，与1相加后，得到int型的2，要向左侧的short类型的s1看齐，即需要通过强制类型转换。正确写法：s1 = (short) (s1 + 1);</p><p>short s1 = 1; s1 += 1;正确！ 执行s1+=1;其实执行的是s1 = (short) (s1 + 1); 其中会有一个强制转换的过程。</p><p>正确的写法是：short s1=1;s1=(short)(s1+1); 或者 short s1=1;s1+=1;</p><h3 id="_1-2-重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#_1-2-重载和重写的区别" aria-hidden="true">#</a> 1.2 重载和重写的区别</h3><hr><p>重载（Overloading）： 重载是指在同一个类中定义多个方法，它们具有相同的名称但参数列表不同（参数类型、参数个数或参数顺序不同）。重载方法通常用于提供不同的方法签名，以便根据不同的输入参数调用不同的方法。重载不涉及继承关系，而是在同一个类中进行定义。</p><p>重写（Overriding）： 重写是指在子类中重新定义父类中已有的方法，保持方法名称、参数列表以及返回类型完全相同。重写用于实现多态性，允许子类在保留父类方法签名的情况下，重新定义方法的具体实现。重写要求子类和父类之间存在继承关系。</p><p>总结：</p><p>重载用于在同一个类中根据参数的不同提供多个方法签名，方法名相同但参数不同。 重写用于子类中重新定义父类已有的方法，方法名、参数列表和返回类型必须完全一致。 重载和重写是面向对象编程的重要特性，它们共同为代码的灵活性和可维护性提供了支持。</p><p>数组是一种用于存储一组相同类型元素的数据结构。实例化数组意味着创建数组对象并分配内存空间，以便可以存储元素。以下是几种常见的数组实例化方式：</p><h3 id="_1-3-数组实例化有几种方式" tabindex="-1"><a class="header-anchor" href="#_1-3-数组实例化有几种方式" aria-hidden="true">#</a> 1.3 数组实例化有几种方式？</h3><hr><p><strong>静态初始化：</strong></p><p>在静态初始化中，您可以在声明数组变量的同时为数组分配内存空间并初始化元素。这种方式适用于您已经知道数组的元素值的情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态初始化：</strong></p><p>动态初始化是在声明数组变量后，通过使用 new 关键字为数组分配内存空间，并随后分配初始值给数组元素。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配包含 5 个整数元素的数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配包含 3 个字符串元素的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多维数组初始化：</strong></p><p>多维数组可以在声明的同时进行静态初始化或动态初始化，实例化多维数组需要指定每个维度的大小。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 3x3 整数矩阵</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ticTacToe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 3x3 字符矩阵</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匿名数组：</strong> 在某些情况下，您可以使用匿名数组进行一次性的操作，无需显式声明数组变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印并实例化匿名整数数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-java-中各种数据默认值" tabindex="-1"><a class="header-anchor" href="#_1-4-java-中各种数据默认值" aria-hidden="true">#</a> 1.4 Java 中各种数据默认值</h3><hr><p>在Java中，各种数据类型在被声明但尚未被初始化的情况下会被赋予默认值。以下是Java中各种数据类型的默认值：</p><p>数值类型（整数和浮点数）：</p><ul><li>byte: 0</li><li>short: 0</li><li>int: 0</li><li>long: 0L</li><li>float: 0.0f</li><li>double: 0.0</li></ul><p>字符类型：</p><ul><li>char: &#39;\\u0000&#39;，即Unicode中的空字符</li></ul><p>布尔类型：</p><ul><li>boolean: false</li></ul><p>引用类型（类、接口、数组）：</p><ul><li>对象引用类型（如类、接口）：null</li><li>数组引用类型：null</li></ul><p>需要注意的是，这些默认值是在变量被声明但尚未被显式初始化时所具有的初始值。当创建一个新的变量时，如果不为其赋值，它们将自动获得这些默认值。</p><p>例如，以下代码片段展示了各种数据类型的默认值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultValuesExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span> b<span class="token punctuation">;</span>
    <span class="token keyword">short</span> s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">long</span> l<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f<span class="token punctuation">;</span>
    <span class="token keyword">double</span> d<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> bool<span class="token punctuation">;</span>
    <span class="token class-name">String</span> str<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultValuesExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultValuesExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;byte: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;short: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;int: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;long: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;float: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;double: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;char: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;boolean: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-object-类常用方法有那些" tabindex="-1"><a class="header-anchor" href="#_1-5-object-类常用方法有那些" aria-hidden="true">#</a> 1.5 Object 类常用方法有那些？</h3><hr><p>java.lang.Object 类是所有Java类的根类，它包含了一些常用的方法，这些方法可以被任何类继承和使用。以下是Object 类中一些常用的方法：</p><p><strong>equals(Object obj)：</strong> 用于比较两个对象是否相等。默认情况下，equals 方法比较的是对象的引用是否相同，但可以在子类中重写该方法以自定义对象相等的条件。</p><p><strong>hashCode()：</strong> 返回对象的哈希码值。哈希码通常用于在集合（如哈希表）中快速定位对象。对于相等的对象，它们的哈希码应该相同，但相同哈希码的对象不一定相等。</p><p><strong>toString()：</strong> 返回对象的字符串表示。默认情况下，toString 方法返回包含类名和哈希码的字符串。它通常会被重写以提供更有用的对象描述。</p><p><strong>getClass()：</strong> 返回对象的运行时类的引用，即对象所属的类。可以用于获取对象的类信息。</p><p><strong>finalize()：</strong> 在对象被垃圾回收之前，系统会调用该方法。通常情况下，不推荐使用该方法，而是使用AutoCloseable接口或者try-with-resources来确保资源的释放。</p><p><strong>notify()、notifyAll()、wait()：</strong> 用于支持线程之间的通信和协调。这些方法通常与wait()、notify()和notifyAll()结合使用，以实现多线程之间的同步。</p><p><strong>clone()：</strong> 创建并返回当前对象的浅拷贝（副本）。需要注意的是，为了正确实现对象的拷贝，被复制的对象需要实现Cloneable接口。</p><h3 id="_1-6-java-中是值传递引用传递" tabindex="-1"><a class="header-anchor" href="#_1-6-java-中是值传递引用传递" aria-hidden="true">#</a> 1.6 java 中是值传递引用传递？</h3><hr><p>Java 中是<strong>值传递（Pass-by-Value）</strong>。这意味着当你将一个参数传递给方法时，实际上传递的是参数的值（即引用的副本），而不是原始引用本身。这可能在处理基本数据类型和对象引用时产生不同的效果。</p><p>对于基本数据类型（如整数、浮点数等），传递的是实际的值，方法内对参数的修改不会影响调用处的变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Copy</span> code
<span class="token keyword">void</span> <span class="token function">modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">modifyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但对于对象引用，传递的是引用的副本，这意味着方法内的操作可能会影响调用处的对象，但不会改变原始引用指向的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Copy</span> code
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">modifyReference</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
    person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">modifyReference</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Alice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，虽然在方法内部修改了 person 对象的 name 属性，但在方法内部重新分配了一个新的 Person 对象，所以方法结束后，调用处的 person 仍然指向原来的对象。</p>`,60),d=a(`<h3 id="_1-7-形参与实参区别" tabindex="-1"><a class="header-anchor" href="#_1-7-形参与实参区别" aria-hidden="true">#</a> 1.7 形参与实参区别</h3><hr><p>在编程中，形参（Formal Parameter）和实参（Actual Argument）是两个重要的概念，用于描述方法或函数的参数传递过程。它们之间的区别如下：</p><p>形参（Formal Parameter）： 形参是在定义函数或方法时，用于表示该函数或方法接受的参数的名称。形参实际上是函数或方法的参数列表中的标识符，用于表示传递给函数或方法的数据。形参在函数或方法的定义中起到了占位符的作用，指定了函数需要接受的数据类型和个数。</p><p>例如，在以下方法中，x 和 y 就是形参：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实参（Actual Argument）： 实参是在调用函数或方法时，传递给函数或方法的具体数据值。实参是实际传递给函数或方法的数据，用于执行函数或方法的操作。实参的值将会被赋值给形参，在函数或方法的执行过程中被使用。</p><p>例如，在以下方法调用中，5 和 3 就是实参：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在方法调用时，实参的值会被传递给形参，这样函数或方法就可以使用这些值进行计算或其他操作。形参和实参的类型和数量应该匹配，以确保正确的参数传递和处理。</p>`,10),k=a(`<ul><li>形参是函数或方法定义中的参数名，用于指定需要传递给函数或方法的数据类型和个数。</li><li>实参是在调用函数或方法时传递给函数或方法的具体数据值，用于执行函数或方法的操作。</li></ul><h3 id="_1-8-构造方法能不能重写-能不能重载" tabindex="-1"><a class="header-anchor" href="#_1-8-构造方法能不能重写-能不能重载" aria-hidden="true">#</a> 1.8 构造方法能不能重写？能不能重载？</h3><hr><p>在Java中，构造方法是特殊的方法，用于在创建类的实例时初始化对象。构造方法在一些方面与普通方法有所不同，因此无法进行重写（Override），但可以进行重载（Overload）。</p><p>重写（Override）： 重写是指在子类中重新定义父类中已有的方法，保持方法名称、参数列表和返回类型完全相同。重写用于实现多态性，子类可以用自己的实现替换父类的方法。</p><p>由于构造方法在创建对象时由编译器自动调用，并且没有方法名，所以无法在子类中重写构造方法。子类可以使用父类的构造方法来初始化自己的成员变量，但不能像重写普通方法一样在子类中重新定义构造方法。</p><p>重载（Overload）： 重载是指在同一个类中定义多个方法，它们具有相同的名称但参数列表不同（参数类型、参数个数或参数顺序不同）。重载方法可以有不同的参数列表，包括不同的参数类型或不同的参数个数。</p><p>构造方法也可以进行重载。这允许在同一个类中定义多个不同参数列表的构造方法，以便于在创建对象时可以使用不同的初始化方式。</p><p>下面是一个构造方法重载的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认构造方法</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，Person 类中定义了多个构造方法，每个构造方法都有不同的参数列表，从而实现了构造方法的重载。</p><p>总结：</p><ul><li>构造方法不能被重写，因为重写要求方法名和参数列表完全相同，而构造方法没有方法名。</li><li>构造方法可以进行重载，允许在同一个类中定义多个不同参数列表的构造方法。</li></ul><h3 id="_1-9-内部类与静态内部类的区别" tabindex="-1"><a class="header-anchor" href="#_1-9-内部类与静态内部类的区别" aria-hidden="true">#</a> 1.9 内部类与静态内部类的区别？</h3><hr><p>在Java中，内部类（Inner Class）是一个类定义在另一个类的内部的情况。内部类可以分为非静态内部类和静态内部类，它们之间有一些重要的区别。</p><p>非静态内部类（Inner Class）：</p><p>非静态内部类是定义在外部类实例中的类。它们与外部类的实例相关联，需要依赖外部类的实例存在。 非静态内部类可以访问外部类的成员（包括私有成员），因为它们共享外部类的实例。 非静态内部类不能包含静态成员，因为它们依赖于外部类的实例。 实例化非静态内部类时，需要通过外部类的实例来创建，例如：OuterClass.InnerClass inner = outer.new InnerClass(); 静态内部类（Static Inner Class）：</p><p>静态内部类是定义在外部类中但被声明为静态的类。它们不依赖于外部类的实例，可以在外部类实例不存在的情况下被实例化。 静态内部类不能直接访问外部类的非静态成员，但可以访问外部类的静态成员。 静态内部类可以包含静态成员，因为它们不依赖于外部类的实例。 实例化静态内部类时，不需要外部类的实例，例如：OuterClass.StaticInnerClass inner = new OuterClass.StaticInnerClass(); 示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> outerField<span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token comment">// 非静态内部类</span>
        <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outerField<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问外部类的成员</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态内部类</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> staticInnerField<span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">staticInnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staticInnerField<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问外部类的静态成员</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>非静态内部类依赖于外部类的实例，可以访问外部类的成员。</li><li>静态内部类不依赖于外部类的实例，可以访问外部类的静态成员。</li></ul><h3 id="_1-10-static-关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_1-10-static-关键字有什么作用" aria-hidden="true">#</a> 1.10 Static 关键字有什么作用？</h3><hr><p>static 是Java中的一个关键字，用于声明静态成员和静态方法，它具有以下几个作用：</p><p><strong>静态变量（Static Variables）：</strong></p><p>使用 static 关键字声明的变量被称为静态变量或类变量。静态变量属于类，而不是类的实例。它们在类加载时被初始化，不需要实例化类就可以访问。所有类的实例都共享相同的静态变量副本。</p><p><strong>静态方法（Static Methods）：</strong></p><p>使用 static 关键字声明的方法被称为静态方法。静态方法属于类，而不是类的实例。它们可以通过类名直接调用，不需要通过类的实例来调用。静态方法内部不能访问实例变量，因为它们没有与特定实例关联。</p><p><strong>静态块（Static Blocks）：</strong></p><p>静态块是用 static 关键字定义的代码块，在类加载时执行。它可以用于在类加载时初始化静态变量或执行其他需要在类加载时完成的操作。</p><p><strong>静态内部类（Static Inner Classes）：</strong></p><p>静态内部类是嵌套在另一个类内部的类，使用 static 关键字声明。它不依赖于外部类的实例，可以通过外部类的类名直接访问。</p><p><strong>静态导入（Static Import）：</strong></p><p>使用 import static 关键字，可以直接导入一个类的静态成员，从而在代码中不需要使用类名前缀来访问这些静态成员。</p><p>static 关键字的作用在于创建与类关联而不是与类的实例关联的成员和方法，使其可以在没有实例的情况下访问和调用。但是，需要谨慎使用静态成员，因为它们在内存中只有一份副本，并且容易引起线程安全和内存管理问题。</p><h3 id="_1-11-final-在-java-中的作用-有哪些用法" tabindex="-1"><a class="header-anchor" href="#_1-11-final-在-java-中的作用-有哪些用法" aria-hidden="true">#</a> 1.11 final 在 java 中的作用，有哪些用法?</h3><hr><p>在Java中，final 是一个关键字，用于表示不可变性、不可继承性以及具有特定含义的修饰符。它具有以下几种主要的用法和作用：</p><p>不可变性（Immutable）：</p><p>用于修饰变量：使用 final 修饰的变量称为常量，一旦初始化后就无法再改变它们的值。常量通常用大写字母命名，例如：final int MAX_VALUE = 100;。 用于修饰方法参数：如果在方法参数列表中使用 final 修饰参数，意味着在方法内部不能修改参数的值。 不可继承性（Preventing Inheritance）：</p><p>用于修饰类：使用 final 修饰的类不能被其他类继承。这在某些情况下用于防止派生类对原始类的修改和扩展。 方法重写（Method Overriding）：</p><p>用于修饰方法：使用 final 修饰的方法不能被子类重写（Override）。这可以用于确保在子类中不会修改父类的方法行为。 内部类引用（Inner Class Reference）：</p><p>用于修饰内部类引用：在匿名内部类中，如果要引用外部方法的局部变量，该变量必须被声明为 final。这是因为匿名内部类会持有对这些变量的引用，而 final 保证了变量的值在匿名内部类中不会被修改。 示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> constantValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> localVar <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 不可变的局部变量</span>
        <span class="token comment">// localVar = 10; // 编译错误，不能修改 final 变量</span>
        
        <span class="token keyword">final</span> <span class="token class-name">FinalExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// example = new FinalExample(); // 编译错误，不能修改 final 引用</span>
        
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以访问 final 变量</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>final 关键字在Java中用于表示不可变性、不可继承性以及限制方法重写等。</li><li>final 可以用于修饰变量、方法、类以及内部类引用。</li></ul><h3 id="_1-12-string-str-aaa-与-string-str-new-string-aaa-一样吗" tabindex="-1"><a class="header-anchor" href="#_1-12-string-str-aaa-与-string-str-new-string-aaa-一样吗" aria-hidden="true">#</a> 1.12 String str=”aaa”,与 String str=new String(“aaa”)一样吗？</h3><hr><p>在大多数情况下，String str = &quot;aaa&quot; 和 String str = new String(&quot;aaa&quot;) 并不完全相同。虽然它们都可以用来创建一个字符串对象，但它们有一些关键的区别。</p><p>字符串字面值方式（String str = &quot;aaa&quot;）： 当使用字符串字面值创建字符串对象时，如果字符串常量池中已经存在相同内容的字符串，就会直接引用已存在的字符串对象，而不会创建新的对象。这是由于字符串常量池的特性，它是存储字符串字面值的一个池子。 如果字符串常量池中不存在相同内容的字符串，那么会在池中创建一个新的字符串对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个指向 &quot;aaa&quot; 的字符串对象</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 直接引用已存在的字符串对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 new 关键字创建对象方式（String str = new String(&quot;aaa&quot;)）： 使用 new 关键字创建字符串对象时，无论字符串常量池中是否存在相同内容的字符串，都会在堆内存中创建一个新的字符串对象。 这种方式会始终创建一个新的对象，即使在字符串常量池中已经存在相同的内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在堆内存中创建一个新的字符串对象</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在堆内存中创建另一个新的字符串对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>使用字符串字面值方式创建字符串时，会尝试在字符串常量池中查找或创建字符串对象。</li><li>使用 new 关键字创建字符串对象时，会在堆内存中创建一个新的字符串对象，而不论字符串常量池中是否存在相同内容的字符串。</li><li>使用String a = “aaa” ，程序运行时会在常量池中查找”aaa”字符串，若没有，会将”aaa”字符串放进常量池，再将其地址赋给a；若有，将找到的”aaa”字符串的地址赋给a。</li><li>使用String b = new String(&quot;aaa&quot;)，程序会在堆内存中开辟一片新空间存放新对象，同时会将”aaa”字符串放入常量池，相当于创建了两个对象，无论常量池中有没有”aaa”字符串，程序都会 在堆内存中开辟一片新空间存放新对象。</li></ul><h3 id="_1-3-讲下-java-中的-math-类有那些常用方法" tabindex="-1"><a class="header-anchor" href="#_1-3-讲下-java-中的-math-类有那些常用方法" aria-hidden="true">#</a> 1.3 讲下 java 中的 math 类有那些常用方法？</h3><hr><p>java.lang.Math 类是Java中提供的一个数学工具类，它包含了许多常用的数学方法，用于执行各种数学计算。以下是一些Math类中常用的方法：</p><p>基本数学运算方法：</p><ul><li>int abs(int a)：返回参数的绝对值。</li><li>double ceil(double a)：向上取整，返回大于等于参数的最小整数。</li><li>double floor(double a)：向下取整，返回小于等于参数的最大整数。</li><li>int max(int a, int b)：返回两个参数中较大的一个。</li><li>int min(int a, int b)：返回两个参数中较小的一个。</li><li>double pow(double base, double exponent)：返回一个数的指数幂。</li><li>double sqrt(double a)：返回参数的平方根。</li></ul><p>三角函数方法：</p><ul><li>double sin(double a)：返回参数的正弦值。</li><li>double cos(double a)：返回参数的余弦值。</li><li>double tan(double a)：返回参数的正切值。</li><li>double atan2(double y, double x)：返回以y/x为坐标的点的角度，范围是 -π 到 π。</li></ul><p>取整和舍入方法：</p><ul><li>double round(double a)：四舍五入到最接近的整数。</li><li>int round(float a)：四舍五入到最接近的整数。</li></ul><p>随机数生成方法：</p><ul><li>double random()：返回一个[0, 1)之间的随机浮点数。</li></ul><p>指数和对数方法：</p><ul><li>double exp(double a)：返回自然对数的底数e的参数次方。</li><li>double log(double a)：返回参数的自然对数（以e为底）。</li></ul><p>其他方法：</p><ul><li>double toRadians(double degrees)：将角度转换为弧度。</li><li>double toDegrees(double radians)：将弧度转换为角度。</li></ul><p>这只是Math类中一些常用方法的概述。通过使用这些方法，您可以执行各种数学运算，从基本的算术操作到三角函数、指数对数等复杂的计算。请注意，Math类中的方法都是静态方法，因此可以直接使用类名调用，如：Math.abs(-5)。</p><h3 id="_1-14-char-类型能不能转成-int-类型-能不能转化成-string-类型-能不能转成-double-类型" tabindex="-1"><a class="header-anchor" href="#_1-14-char-类型能不能转成-int-类型-能不能转化成-string-类型-能不能转成-double-类型" aria-hidden="true">#</a> 1.14 Char 类型能不能转成 int 类型？能不能转化成 string 类型，能不能转成 double 类型</h3><hr><p>Char 类型在 Java 中可以进行一些类型转换，但需要注意转换的方式和限制。</p><p>char 转 int：</p><p>Char 类型可以被隐式转换为 int 类型。因为 char 是 Unicode 编码的字符，其对应的整数值就是字符的 Unicode 码点。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> intValue <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// 将字符 &#39;A&#39; 转换为整数 65</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>char 转 String：</p><p>Char 类型可以通过连接操作转换为 String 类型。当将 char 类型与 String 类型连接时，char 会被当作字符进行连接。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;The character is: &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment">// 连接字符 &#39;A&#39; 到字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>char 转 double：</p><p>Char 类型不能直接转换为 double 类型，因为 char 是表示字符的数据类型，而 double 是浮点数的数据类型。如果需要将 char 类型转换为 double 类型，需要经过 int 中间步骤。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> intValue <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// 将字符 &#39;5&#39; 转换为整数 53</span>
<span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> intValue<span class="token punctuation">;</span> <span class="token comment">// 将整数 53 转换为 double 53.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>Char 类型可以隐式转换为 int 类型，Unicode 码点将作为整数值。</li><li>Char 类型可以通过连接操作转换为 String 类型。</li><li>Char 类型不能直接转换为 double 类型，需要通过 int 中间步骤。</li></ul><h3 id="_1-15-什么是拆装箱" tabindex="-1"><a class="header-anchor" href="#_1-15-什么是拆装箱" aria-hidden="true">#</a> 1.15 什么是拆装箱？</h3><p>拆装箱（Boxing and Unboxing）是 Java 中用于在基本数据类型（Primitive Types）和对应的包装类（Wrapper Classes）之间进行转换的过程。Java 提供了基本数据类型和对应的包装类来满足不同需求，但有时需要在它们之间进行转换。拆装箱就是这种转换过程的称呼。</p><p><strong>装箱（Boxing）：</strong></p><p>装箱是将基本数据类型转换为对应的包装类对象的过程。在装箱时，Java 会自动创建一个包装类的对象，然后将基本数据类型的值赋值给对象的属性。装箱可以通过直接赋值或方法调用来完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>intValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 装箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拆箱（Unboxing）：</strong></p><p>拆箱是将包装类对象转换为对应的基本数据类型的过程。在拆箱时，Java 会从包装类对象中提取出存储的基本数据类型的值，然后赋值给基本数据类型变量。拆箱可以通过直接赋值或方法调用来完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> intValue <span class="token operator">=</span> integerValue<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java 5及以后的版本中，引入了自动拆装箱机制，使得拆装箱更加便捷。这意味着您可以在需要时直接使用基本数据类型和包装类，而不必显式进行装箱和拆箱操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> intValue<span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token keyword">int</span> intValueAgain <span class="token operator">=</span> integerValue<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ul><li>装箱是将基本数据类型转换为包装类对象。</li><li>拆箱是将包装类对象转换为基本数据类型。</li><li>自动拆装箱机制使得拆装箱更加方便。</li></ul><h3 id="_1-16-java-中的包装类都是那些" tabindex="-1"><a class="header-anchor" href="#_1-16-java-中的包装类都是那些" aria-hidden="true">#</a> 1.16 Java 中的包装类都是那些？</h3><hr><p>Java 中的包装类（Wrapper Classes）是用于将基本数据类型转换为对象的类，以便在需要对象的情况下使用。每种基本数据类型都有对应的包装类。以下是Java中的包装类：</p><p><strong>整数类型（Integer Types）：</strong></p><ul><li>Byte：对应 byte</li><li>Short：对应 short</li><li>Integer：对应 int</li><li>Long：对应 long</li></ul><p><strong>浮点数类型（Floating-Point Types）：</strong></p><ul><li>Float：对应 float</li><li>Double：对应 double</li></ul><p><strong>字符类型（Character Type）：</strong></p><ul><li>Character：对应 char</li></ul><p><strong>布尔类型（Boolean Type）：</strong></p><ul><li>Boolean：对应 boolean</li></ul><p>这些包装类都位于 java.lang 包中，因此在使用时不需要显式导入。包装类提供了许多方法来操作基本数据类型值，以及进行类型转换、字符串转换等操作。在需要对象的情况下，可以使用包装类来处理基本数据类型。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 装箱</span>
<span class="token keyword">int</span> primitiveValue <span class="token operator">=</span> intValue<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拆箱</span>

<span class="token class-name">Character</span> charValue <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token keyword">char</span> primitiveChar <span class="token operator">=</span> charValue<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱</span>

<span class="token class-name">Boolean</span> boolValue <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
<span class="token keyword">boolean</span> primitiveBool <span class="token operator">=</span> boolValue<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包装类在许多场景中非常有用，例如在集合框架中，只能存储对象，因此需要使用包装类来存储基本数据类型值。同时，包装类也提供了许多方便的方法来进行数值计算和类型转换。</p>`,113);function v(m,b){const s=i("font");return o(),l("div",null,[r,c("p",null,[n("总结：Java 中是值传递，对于基本数据类型，传递的是实际值；对于对象引用，传递的是引用的副本，方法内的操作可能影响调用处的对象，"),e(s,{color:"red"},{default:t(()=>[n("但不会改变原始引用指向的对象。")]),_:1})]),d,e(s,{color:"red",size:"4"},{default:t(()=>[n("总结:")]),_:1}),k])}const h=p(u,[["render",v],["__file","interview-2023.html.vue"]]);export{h as default};
