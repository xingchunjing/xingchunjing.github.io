import{_ as p,X as o,Y as c,Z as n,$ as s,a0 as t,a2 as e,E as i}from"./framework-f01f539c.js";const l="/assets/images/apple-pay01.jpg",u="/assets/images/apple-pay02.jpg",r="/assets/images/apple-pay03.jpg",d="/assets/images/apple-pay04.jpg",k="/assets/images/apple-pay05.jpg",m={},v=e(`<h1 id="苹果内购-wwdc" tabindex="-1"><a class="header-anchor" href="#苹果内购-wwdc" aria-hidden="true">#</a> 苹果内购-WWDC</h1><h2 id="app-store-server-api" tabindex="-1"><a class="header-anchor" href="#app-store-server-api" aria-hidden="true">#</a> App Store Server API</h2><p>苹果提供了以下这些 Server API</p><h3 id="api简介" tabindex="-1"><a class="header-anchor" href="#api简介" aria-hidden="true">#</a> API简介</h3><hr><p><strong>查询用户订单的收据</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET https://api.storekit.itunes.apple.com/inApps/v1/lookup/<span class="token punctuation">{</span>orderId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),b={href:"https://developer.apple.com/documentation/appstoreserverapi/look_up_order_id",target:"_blank",rel:"noopener noreferrer"},g=e(`<p><strong>查询用户历史收据</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET https://api.storekit.itunes.apple.com/inApps/v1/history/<span class="token punctuation">{</span>originalTransactionId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),y={href:"https://developer.apple.com/documentation/appstoreserverapi/get_transaction_history",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><strong>查询用户内购退款</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET https://api.storekit.itunes.apple.com/inApps/v1/refund/lookup/<span class="token punctuation">{</span>originalTransactionId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),f={href:"https://developer.apple.com/documentation/appstoreserverapi/get_refund_history",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><strong>查询用户订阅项目状态</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/<span class="token punctuation">{</span>originalTransactionId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),S={href:"https://developer.apple.com/documentation/appstoreserverapi/get_all_subscription_statuses",target:"_blank",rel:"noopener noreferrer"},_=e(`<p><strong>提交防欺诈信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT https://api.storekit.itunes.apple.com/inApps/v1/transactions/consumption/<span class="token punctuation">{</span>originalTransactionId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),q={href:"https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information",target:"_blank",rel:"noopener noreferrer"},x=e(`<p><strong>延长用户订阅的时长</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT https://api.storekit.itunes.apple.com/inApps/v1/subscriptions/extend/<span class="token punctuation">{</span>originalTransactionId<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),I={href:"https://developer.apple.com/documentation/appstoreserverapi/extend_a_subscription_renewal_date",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="接口参数说明" tabindex="-1"><a class="header-anchor" href="#接口参数说明" aria-hidden="true">#</a> 接口参数说明</h3><hr><p>App Store Server API 是苹果提供给开发者，通过服务器来管理用户在 App Store 应用内购买的一套接口（REST API）。</p><p>线上环境的 URL：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://api.storekit.itunes.apple.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>沙盒环境测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://api.storekit-sandbox.itunes.apple.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>JWT 简介:</strong></p><p>调用这些 API 需要 JWT（JSON Web Token）进行授权。那么什么是 JWT 呢？</p><p>JWT 是一个开放式标准（规范文件 RFC 7519），用于在各方之间以 JSON 对象安全传输信息。有两种实现，一种基于 JWS 的实现使用了BASE64URL编码和数字签名的方式对传输的Claims提供了完整性保护，也就是仅仅保证传输的Claims内容不被篡改，但是会暴露明文。另一种是基于 JWE 实现的依赖于加解密算法、BASE64URL编码和身份认证等手段提高传输的Claims内容被破解的难度。</p><ul><li>JWS（规范文件 RFC 7515）： JSON Web Signature，表示使用 JSON 数据结构和 BASE64URL 编码表示经过数字签名或消息认证码（MAC）认证的内容。</li><li>JWE（规范文件 RFC 7516）： JSON Web Encryption，表示基于 JSON 数据结构的加密内容。</li></ul><p>目前苹果 JWT 相关的内容，都是基于 JWS 实现，所以下文的 JWT 默认指 JWS。</p><p>JWT（JWS) 由三部分组成：</p><ul><li>header：主要声明了 JWT 的签名算法；</li><li>payload：主要承载了各种声明并传递明文数据；</li><li>signture：拥有该部分的 JWT 被称为 JWS，也就是签了名的 JWS。</li></ul><p><strong>组装 JWT</strong></p><p>知道了基本的 JWT 知识，我们就可以开工啦。要生成签名的 JWT 有三步：</p><ol><li>创建 JWT 标头。</li><li>创建 JWT 有效负载。</li><li>在 JWT 上签名。</li></ol><p>JWT header 示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES256&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;kid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2X9R4HXF34&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JWT payload 示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;iss&quot;</span><span class="token operator">:</span> <span class="token string">&quot;57246542-96fe-1a63e053-0824d011072a&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1623085200</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1623086400</span><span class="token punctuation">,</span>
  <span class="token property">&quot;aud&quot;</span><span class="token operator">:</span> <span class="token string">&quot;appstoreconnect-v1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;nonce&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6edffe66-b482-11eb-8529-0242ac130003&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.example.testbundleid2021&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是苹果要求的字段规范，所以不同的 JWT 字符和内容并一样，所以，我们看看苹果对这些字段的定义：</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">字段说明</th><th style="text-align:left;">字段值说明</th></tr></thead><tbody><tr><td style="text-align:left;">alg</td><td style="text-align:left;">Encryption Algorithm，加密算法</td><td style="text-align:left;">默认值：ES256。App Store Server API 的所有 JWT 都必须使用 ES256 加密进行签名。</td></tr><tr><td style="text-align:left;">kid</td><td style="text-align:left;">Key ID，密钥ID</td><td style="text-align:left;">您的私钥ID，值来自 App Store Connect，下文会讲解。</td></tr><tr><td style="text-align:left;">typ</td><td style="text-align:left;">Token Type，令牌类型</td><td style="text-align:left;">默认值：JWT</td></tr><tr><td style="text-align:left;">iss</td><td style="text-align:left;">Issuer，发行人</td><td style="text-align:left;">您的发卡机构ID，值来自 App Store Connect 的密钥页面，下文会讲解。</td></tr><tr><td style="text-align:left;">iat</td><td style="text-align:left;">Issued At，发布时间</td><td style="text-align:left;">秒，以 UNIX 时间（例如：1623085200）发布令牌的时间</td></tr><tr><td style="text-align:left;">exp</td><td style="text-align:left;">Expiration Time，到期时间</td><td style="text-align:left;">秒，令牌的到期时间，以 UNIX 时间为单位。在iat中超过 60 分钟过期的令牌无效（例如：1623086400）</td></tr><tr><td style="text-align:left;">aud</td><td style="text-align:left;">Audience，受众</td><td style="text-align:left;">固定值：appstoreconnect-v1</td></tr><tr><td style="text-align:left;">nonce</td><td style="text-align:left;">Unique Identifier，唯一标识符</td><td style="text-align:left;">您仅创建和使用一次的任意数字(例如: &quot;6edffe66-b482-11eb-8529-0242ac130003&quot;)。可以理解为 UUID 值。</td></tr><tr><td style="text-align:left;">bid</td><td style="text-align:left;">Bundle ID，套装ID</td><td style="text-align:left;">您的 app 的套装ID(例如：&quot;com.example.testbundleid2021&quot;)</td></tr></tbody></table><p>其中 <code>kid</code> 和 <code>iss</code> 值是从 App Store Connect 后台创建和获取。</p><p><strong>生成密钥 ID（kid）</strong></p><p>要生成密钥，您必须在 App Store Connect 中具有管理员角色或帐户持有人角色。登录 App Store Connect 并完成以下步骤：</p><ol><li>选择 “用户和访问”，然后选择 “密钥” 子标签页。</li><li>在 “密钥类型” 下选择 “App内购买项目”。</li><li>单击 “生成API内购买项目密钥”（如果之前创建过，则点击 “添加（+）” 按钮新增。）。</li><li>输入密钥的名称。该名称仅供您参考，名字不作为密钥的一部分。</li><li>单击 “生成”。</li></ol><figure><img src="`+l+'" alt="用户及访问" tabindex="0" loading="lazy"><figcaption>用户及访问</figcaption></figure><figure><img src="'+u+'" alt="密钥" tabindex="0" loading="lazy"><figcaption>密钥</figcaption></figure><p>生成的密钥，有一列名为 “密钥 ID” 就是 kid 的值，鼠标移动到文字就会显示 拷贝密钥 ID，点击按钮就可以复制 kid 值。</p><p><strong>生成 Issuer（iss）</strong> 同理，iss 值的生成，类似：</p><p><strong>issuer ID</strong> 值就是 iss 的值。</p><figure><img src="'+r+'" alt="issuer" tabindex="0" loading="lazy"><figcaption>issuer</figcaption></figure><p><strong>生成和签名 JWT</strong></p><p>获取到这里参数后，就需要签名，那么还需要签名的密钥文件。</p><p><strong>下载并保存密钥文件</strong></p><p>App Store Connect 密钥文件，在刚才生成 <code>kid</code>时，列表右边有 <code>下载 App 内购买项目密钥</code> 按钮（仅当您尚未下载私钥时，才会显示下载链接。）：</p><figure><img src="'+d+'" alt="密钥文件" tabindex="0" loading="lazy"><figcaption>密钥文件</figcaption></figure><p>此私钥只能一次性下载！</p><p>另外 Apple 不保留私钥的副本，将您的私钥存放在安全的地方。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：将您的私钥存放在安全的地方。不要共享密钥，不要将密钥存储在代码仓库中，不要将密钥放在客户端代码中。如果您怀疑私钥被盗，请立即在 App Store Connect 中撤销密钥。有关详细信息，请参阅 撤销API密钥。</p></div><figure><img src="'+k+`" alt="密钥文件" tabindex="0" loading="lazy"><figcaption>密钥文件</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>API密钥有两个部分：苹果保留的公钥和您下载的私钥。开发者使用私钥对授权 API 在 App Store 中访问数据的令牌进行签名。</p><p>需要注意的是，App Store Server API 密钥是 App Store Server API 所独有的，不能用于其他 Apple 服务（比如 Sign in with Apple 服务或 App Store Connet API 服务等。）。</p></div><h3 id="生成请求令牌" tabindex="-1"><a class="header-anchor" href="#生成请求令牌" aria-hidden="true">#</a> 生成请求令牌</h3><hr><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>game<span class="token punctuation">.</span>server<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">PrivateKey</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span></span><span class="token class-name">CertificateFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span></span><span class="token class-name">X509Certificate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeySpecException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtBuilder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 通过私钥生成一个JWT的token 用于以后解析验证
     *
     * <span class="token keyword">@param</span> <span class="token parameter">issuer</span>
     * <span class="token keyword">@param</span> <span class="token parameter">aud</span>
     * <span class="token keyword">@param</span> <span class="token parameter">kid</span>
     * <span class="token keyword">@param</span> <span class="token parameter">bid</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> issuer<span class="token punctuation">,</span> <span class="token class-name">String</span> aud<span class="token punctuation">,</span> <span class="token class-name">String</span> kid<span class="token punctuation">,</span> <span class="token class-name">String</span> bid<span class="token punctuation">,</span> <span class="token class-name">String</span> privateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span>
        <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm <span class="token operator">=</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">ES256</span><span class="token punctuation">;</span>

        <span class="token comment">// 生成JWT的时间</span>
        <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建payload的私有声明（根据特定的业务需要添加，如果要拿这个做验证，一般是需要和jwt的接收方提前沟通好验证方式的）</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ES256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;typ&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;JWT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;kid&quot;</span><span class="token punctuation">,</span> kid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> expMillis <span class="token operator">=</span> nowMillis <span class="token operator">+</span> <span class="token number">3600000</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> expDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成签名的时候使用的秘钥secret，切记这个秘钥不能外露哦。它就是你服务端的私钥，在任何场景都不应该流露出去。</span>
        <span class="token comment">// 一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</span>
        <span class="token comment">// 下面就是在为payload添加各种标准声明和私有声明了</span>
        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里其实就是new一个JwtBuilder，设置jwt的body</span>
                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span>
                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;nonce&quot;</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 设置唯一标志符</span>
                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;bid&quot;</span><span class="token punctuation">,</span> bid<span class="token punctuation">)</span><span class="token comment">// Bundle ID，套装ID app</span>
                                  <span class="token comment">// 的套装ID（例如：“com.example.testbundleid2021”)</span>
                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token comment">// iat: jwt的签发时间</span>
                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span>issuer<span class="token punctuation">)</span> <span class="token comment">// issuer：jwt签发人</span>
                <span class="token punctuation">.</span><span class="token function">setAudience</span><span class="token punctuation">(</span>aud<span class="token punctuation">)</span> <span class="token comment">// 接收jwt的一方</span>
                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expDate<span class="token punctuation">)</span> <span class="token comment">// 到期时间</span>
                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">,</span> <span class="token class-name">KeyPairFromPEM</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置签名使用的签名算法和签名使用的秘钥</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token class-name">KeyPairFromPEM</span><span class="token punctuation">(</span><span class="token class-name">String</span> privateKeyPEM<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Remove headers and line breaks from the PEM string</span>
        privateKeyPEM <span class="token operator">=</span> privateKeyPEM<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-----BEGIN PRIVATE KEY-----&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-----END PRIVATE KEY-----&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Decode the Base64-encoded PEM content</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>privateKeyPEM<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Generate the PrivateKey</span>
        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// Create a KeyFactory for ECDSA</span>
            <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;EC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Generate the PKCS8EncodedKeySpec from the private key bytes</span>
            <span class="token class-name">PKCS8EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

            privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidKeySpecException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Generate the PublicKey from the private key (you can derive it if</span>
        <span class="token comment">// needed)</span>
        <span class="token comment">// PublicKey publicKey = keyFactory.generatePublic(new</span>
        <span class="token comment">// X509EncodedKeySpec(privateKey.getEncoded()));</span>

        <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyPair</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// For private key only</span>

        <span class="token comment">// Now you have the KeyPair</span>
        <span class="token keyword">return</span> keyPair<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> inputFilePath <span class="token operator">=</span> <span class="token string">&quot;/Users/jingxc/service/sts-project/jj_oversea_jjworld_game/jj_oversea_jjworld_payment/src/main/resources/AppleRootCA-G3.cer&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Replace</span>
        <span class="token comment">// with</span>
        <span class="token comment">// your</span>
        <span class="token comment">// input</span>
        <span class="token comment">// .cer file path</span>
        <span class="token class-name">String</span> outputFilePath <span class="token operator">=</span> <span class="token string">&quot;./output.pem&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Replace with your</span>
                                                <span class="token comment">// desired output .pem</span>
                                                <span class="token comment">// file path</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> cerInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">FileOutputStream</span> pemOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">CertificateFactory</span> certFactory <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;X.509&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">X509Certificate</span> cert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">X509Certificate</span><span class="token punctuation">)</span> certFactory<span class="token punctuation">.</span><span class="token function">generateCertificate</span><span class="token punctuation">(</span>cerInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> certPEM <span class="token operator">=</span> <span class="token string">&quot;-----BEGIN CERTIFICATE-----\\n&quot;</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;-----END CERTIFICATE-----\\n&quot;</span><span class="token punctuation">;</span>

            pemOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>certPEM<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>KeyPairFromPEM:方法是将密钥转换成创建token是需要的KeyPair</li><li>createJWT：方法是创建token的主要方法</li><li>main：方法给出了将苹果的cer证书转换成pem证书</li></ul><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>最后在调用苹果端点</p><p><code>https://api.storekit.itunes.apple.com/inApps/v1/history/{originalTransactionId}</code></p><p>时返回数据出现了信息极少的情况，如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;revision&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bundleId&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.jjlmzh.global.ios&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;appAppleId&quot;</span><span class="token operator">:</span><span class="token number">1628482223</span><span class="token punctuation">,</span>
    <span class="token property">&quot;environment&quot;</span><span class="token operator">:</span><span class="token string">&quot;Production&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hasMore&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;signedTransactions&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>

    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实践中遇到了 消耗性票据 获取不正确的问题 支付票据（receipt）中 收据列表（in_app）会保留所有 订阅类商品、非消耗性商品 信息，且会依次进入列表（最后一位是最新的一次购买记录）。消耗性商品 信息只在未向苹果服务器进行校验时存在，且只存在列表第一项（再次购买 消耗性商品 会替换票据信息）。</p></div><p>后续如果有更新会持续补充...</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,55),E={href:"https://blog.csdn.net/lvyanqin2013/article/details/129623419",target:"_blank",rel:"noopener noreferrer"},T={href:"https://cloud.tencent.com/developer/article/1939304",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[n("strong",null,"本文作者："),s(" 景兴春")],-1),P=n("strong",null,"本文链接：",-1),J={href:"https://www.jingxc.top/back/payment/apple-pay-wwdc.html",target:"_blank",rel:"noopener noreferrer"},K=n("strong",null,"版权声明：",-1),W={href:"https://www.apache.org/licenses/LICENSE-2.0.html",target:"_blank",rel:"noopener noreferrer"};function C(D,F){const a=i("ExternalLinkIcon");return o(),c("div",null,[v,n("p",null,[n("a",b,[s("Look Up Order ID"),t(a)]),s(" : 使用订单ID从收据中获取用户的应用内购买项目收据信息。")]),g,n("p",null,[n("a",y,[s("Get Transaction History"),t(a)]),s(" : 获取用户在您的 app 的应用内购买交易历史记录。")]),h,n("p",null,[n("a",f,[s("Get Refund History"),t(a)]),s(" : 获取 app 中为用户退款的所有应用内购买项目的列表。")]),w,n("p",null,[n("a",S,[s("Get All Subscription Statuses"),t(a)]),s(" : 获取您 app 中用户所有订阅的状态。")]),_,n("p",null,[n("a",q,[s("Send Consumption Information"),t(a)]),s(" : 当用户申请退款时，苹果通知（CONSUMPTION_REQUEST）开发者服务器，开发者可在12小时内，提供用户的信息（比如游戏金币是否已消费、用户充值过多少钱、退款过多少钱等），最后苹果收到这些信息，协助“退款决策系统” 来决定是否允许用户退款。")]),x,n("p",null,[n("a",I,[s("Extend a Subscription Renewal Date"),t(a)]),s(" : 使用原始交易标识符延长用户有效订阅的续订日期。（相当于免费给用户增加订阅时长）")]),A,n("ul",null,[n("li",null,[n("a",E,[s("https://blog.csdn.net/lvyanqin2013/article/details/129623419"),t(a)])]),n("li",null,[n("a",T,[s("https://cloud.tencent.com/developer/article/1939304"),t(a)])])]),n("ul",null,[j,n("li",null,[P,s(),n("a",J,[s("https://www.jingxc.top/back/payment/apple-pay-wwdc.html"),t(a)])]),n("li",null,[K,s(" 本博客所有文章除特别声明外，均采用 "),n("a",W,[s("Apache License 2.0"),t(a)]),s(" 许可协议。转载请注明出处！")])])])}const U=p(m,[["render",C],["__file","apple-pay-wwdc.html.vue"]]);export{U as default};
