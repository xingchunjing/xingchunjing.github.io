const e=JSON.parse('{"key":"v-139433a5","path":"/knowledge/thread.html","title":"线程","lang":"zh-CN","frontmatter":{"icon":"asynchronous","date":"2021-02-03T00:00:00.000Z","category":["java","后端"],"tag":["java","后端","thread"],"star":true,"description":"线程 进程&amp;线程 进程：资源分配的最小单位，指在系统中运行的一个应用程序；程序一旦运行就是进程 线程：程序执行的最小单位，系统分配处理器时间资源的基本单元，或者说进程内独立执行的一个单元执行流 wait&amp;sleep sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用 sleep 不需要释放锁，他也不需要占用锁，wait 会释放锁，但调用他的前提是当前线程占有锁（即代码要在 synchronized 中） 他们都可以被 interrupted 方法中断","head":[["meta",{"property":"og:url","content":"https://gitee.com/jing-xingchun/knowledge/thread.html"}],["meta",{"property":"og:site_name","content":"Jingxc"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程 进程&amp;线程 进程：资源分配的最小单位，指在系统中运行的一个应用程序；程序一旦运行就是进程 线程：程序执行的最小单位，系统分配处理器时间资源的基本单元，或者说进程内独立执行的一个单元执行流 wait&amp;sleep sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用 sleep 不需要释放锁，他也不需要占用锁，wait 会释放锁，但调用他的前提是当前线程占有锁（即代码要在 synchronized 中） 他们都可以被 interrupted 方法中断"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-09T13:51:38.000Z"}],["meta",{"property":"article:author","content":"Jingxc"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:published_time","content":"2021-02-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-09T13:51:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-09T13:51:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jingxc\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"进程&线程","slug":"进程-线程","link":"#进程-线程","children":[]},{"level":2,"title":"wait&sleep","slug":"wait-sleep","link":"#wait-sleep","children":[]},{"level":2,"title":"并发&并行","slug":"并发-并行","link":"#并发-并行","children":[]},{"level":2,"title":"线程","slug":"线程-1","link":"#线程-1","children":[]},{"level":2,"title":"Sychronized 关键字(同步锁)","slug":"sychronized-关键字-同步锁","link":"#sychronized-关键字-同步锁","children":[]},{"level":2,"title":"多线程编程步骤(高内聚,低耦合)","slug":"多线程编程步骤-高内聚-低耦合","link":"#多线程编程步骤-高内聚-低耦合","children":[]},{"level":2,"title":"Lock&Synchronized","slug":"lock-synchronized","link":"#lock-synchronized","children":[]},{"level":2,"title":"集合线程安全","slug":"集合线程安全","link":"#集合线程安全","children":[]},{"level":2,"title":"问题8锁8 锁(Lock_8)","slug":"问题8锁8-锁-lock-8","link":"#问题8锁8-锁-lock-8","children":[]},{"level":2,"title":"syncronized 实现同步的基础","slug":"syncronized-实现同步的基础","link":"#syncronized-实现同步的基础","children":[]},{"level":2,"title":"可重入锁(递归锁)","slug":"可重入锁-递归锁","link":"#可重入锁-递归锁","children":[]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":2,"title":"创建线程的 4 种方式","slug":"创建线程的-4-种方式","link":"#创建线程的-4-种方式","children":[]},{"level":2,"title":"Runnable&Callable","slug":"runnable-callable","link":"#runnable-callable","children":[]},{"level":2,"title":"FutureTask 未来任务","slug":"futuretask-未来任务","link":"#futuretask-未来任务","children":[]},{"level":2,"title":"CountDownLatch 减少计数","slug":"countdownlatch-减少计数","link":"#countdownlatch-减少计数","children":[]},{"level":2,"title":"CyclicBarrier 循环栅栏","slug":"cyclicbarrier-循环栅栏","link":"#cyclicbarrier-循环栅栏","children":[]},{"level":2,"title":"Semaphore 信号量","slug":"semaphore-信号量","link":"#semaphore-信号量","children":[]},{"level":2,"title":"乐观锁&悲观锁","slug":"乐观锁-悲观锁","link":"#乐观锁-悲观锁","children":[]},{"level":2,"title":"表锁&行锁","slug":"表锁-行锁","link":"#表锁-行锁","children":[]},{"level":2,"title":"读锁&写锁","slug":"读锁-写锁","link":"#读锁-写锁","children":[]},{"level":2,"title":"锁降级","slug":"锁降级","link":"#锁降级","children":[]},{"level":2,"title":"阻塞队列","slug":"阻塞队列","link":"#阻塞队列","children":[]},{"level":2,"title":"ThreadPool 线程池","slug":"threadpool-线程池","link":"#threadpool-线程池","children":[]},{"level":2,"title":"线程池的 7 个参数介绍","slug":"线程池的-7-个参数介绍","link":"#线程池的-7-个参数介绍","children":[]},{"level":2,"title":"自定义线程池","slug":"自定义线程池","link":"#自定义线程池","children":[]}],"git":{"createdTime":1683640298000,"updatedTime":1683640298000,"contributors":[{"name":"jingxc","email":"2584982513@qq.com","commits":1}]},"readingTime":{"minutes":13.24,"words":3971},"filePathRelative":"knowledge/thread.md","localizedDate":"2021年2月3日","excerpt":"<h1> 线程</h1>\\n<h2> 进程&amp;线程</h2>\\n<ul>\\n<li>进程：资源分配的最小单位，指在系统中运行的一个应用程序；程序一旦运行就是进程</li>\\n<li>线程：程序执行的最小单位，系统分配处理器时间资源的基本单元，或者说进程内独立执行的一个单元执行流</li>\\n</ul>\\n<h2> wait&amp;sleep</h2>\\n<ul>\\n<li>sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用</li>\\n<li>sleep 不需要释放锁，他也不需要占用锁，wait 会释放锁，但调用他的前提是当前线程占有锁（即代码要在 synchronized 中）\\n他们都可以被 interrupted 方法中断</li>\\n</ul>","autoDesc":true}');export{e as data};
