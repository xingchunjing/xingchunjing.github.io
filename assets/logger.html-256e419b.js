const e=JSON.parse('{"key":"v-76730200","path":"/spring/logger.html","title":"日志收集","lang":"zh-CN","frontmatter":{"icon":"flow","date":"2020-11-05T00:00:00.000Z","category":["java","后端"],"tag":["java","后端","Logger"],"star":true,"description":"日志收集 IOC和AOP是Spring体系中两个非常重要的概念，下面就采用AOP的技术为方法添加一个切面，实现接口访问统一日志处理 简单介绍 AOP又名Aspect Oriented Programming 意为 ‘面向切面编程’通过预编译和运行期间动态代理来实现程序功能的统一维护的一种技术。 提示 这种在运行时生成代理对象来织入的，还可以在编译期、类加载期织入，动态地将代码在不改变原有的逻辑情况下切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。","head":[["meta",{"property":"og:url","content":"https://gitee.com/jing-xingchun/spring/logger.html"}],["meta",{"property":"og:site_name","content":"Jingxc"}],["meta",{"property":"og:title","content":"日志收集"}],["meta",{"property":"og:description","content":"日志收集 IOC和AOP是Spring体系中两个非常重要的概念，下面就采用AOP的技术为方法添加一个切面，实现接口访问统一日志处理 简单介绍 AOP又名Aspect Oriented Programming 意为 ‘面向切面编程’通过预编译和运行期间动态代理来实现程序功能的统一维护的一种技术。 提示 这种在运行时生成代理对象来织入的，还可以在编译期、类加载期织入，动态地将代码在不改变原有的逻辑情况下切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-04T07:51:57.000Z"}],["meta",{"property":"article:author","content":"Jingxc"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"Logger"}],["meta",{"property":"article:published_time","content":"2020-11-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-04T07:51:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日志收集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-04T07:51:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jingxc\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"简单介绍","slug":"简单介绍","link":"#简单介绍","children":[]},{"level":2,"title":"为什么使用AOP","slug":"为什么使用aop","link":"#为什么使用aop","children":[]},{"level":2,"title":"关键术语","slug":"关键术语","link":"#关键术语","children":[]},{"level":2,"title":"maven依赖","slug":"maven依赖","link":"#maven依赖","children":[]},{"level":2,"title":"定义切面","slug":"定义切面","link":"#定义切面","children":[]},{"level":2,"title":"声明 pointcut(切入点)","slug":"声明-pointcut-切入点","link":"#声明-pointcut-切入点","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]},{"level":2,"title":"切面实体类","slug":"切面实体类","link":"#切面实体类","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1683186717000,"updatedTime":1683186717000,"contributors":[{"name":"Jingxc","email":"2584982513@qq.com","commits":1}]},"readingTime":{"minutes":5.93,"words":1780},"filePathRelative":"spring/logger.md","localizedDate":"2020年11月5日","excerpt":"<h1> 日志收集</h1>\\n<p>IOC和AOP是Spring体系中两个非常重要的概念，下面就采用AOP的技术为方法添加一个切面，实现接口访问统一日志处理</p>\\n<h2> 简单介绍</h2>\\n<p>AOP又名Aspect Oriented Programming 意为 ‘面向切面编程’通过预编译和运行期间动态代理来实现程序功能的统一维护的一种技术。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>这种在运行时生成代理对象来织入的，还可以在编译期、类加载期织入，动态地将代码在不改变原有的逻辑情况下切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</p>\\n</div>","autoDesc":true}');export{e as data};
