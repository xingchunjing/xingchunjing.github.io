import{_ as t,X as p,Y as e,Z as n,$ as s,a0 as o,a1 as c,a2 as l,E as u}from"./framework-f01f539c.js";const i={},r=l(`<h1 id="_2023面试题" tabindex="-1"><a class="header-anchor" href="#_2023面试题" aria-hidden="true">#</a> 2023面试题</h1><h2 id="_1-java-oop面试题" tabindex="-1"><a class="header-anchor" href="#_1-java-oop面试题" aria-hidden="true">#</a> 1. JAVA OOP面试题</h2><h3 id="_1-1-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" tabindex="-1"><a class="header-anchor" href="#_1-1-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" aria-hidden="true">#</a> 1.1 short s1 = 1; s1 = s1 + 1;有错吗? short s1 = 1; s1 += 1; 有错吗？</h3><hr><div class="hint-container tip"><p class="hint-container-title">提示</p><p>赋值表达式等号两侧的转换的规则是右侧的向左侧的看齐，即右侧表达式要转换到和左边的类型一样。</p></div><p>short s1 = 1; s1 = s1 + 1;错！ s1 + 1，s1是short类型，1是int型，s1会自动转换为int型的1，与1相加后，得到int型的2，要向左侧的short类型的s1看齐，即需要通过强制类型转换。正确写法：s1 = (short) (s1 + 1);</p><p>short s1 = 1; s1 += 1;正确！ 执行s1+=1;其实执行的是s1 = (short) (s1 + 1); 其中会有一个强制转换的过程。</p><p>正确的写法是：short s1=1;s1=(short)(s1+1); 或者 short s1=1;s1+=1;</p><h3 id="_1-2-重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#_1-2-重载和重写的区别" aria-hidden="true">#</a> 1.2 重载和重写的区别</h3><hr><p>重载（Overloading）： 重载是指在同一个类中定义多个方法，它们具有相同的名称但参数列表不同（参数类型、参数个数或参数顺序不同）。重载方法通常用于提供不同的方法签名，以便根据不同的输入参数调用不同的方法。重载不涉及继承关系，而是在同一个类中进行定义。</p><p>重写（Overriding）： 重写是指在子类中重新定义父类中已有的方法，保持方法名称、参数列表以及返回类型完全相同。重写用于实现多态性，允许子类在保留父类方法签名的情况下，重新定义方法的具体实现。重写要求子类和父类之间存在继承关系。</p><p>总结：</p><p>重载用于在同一个类中根据参数的不同提供多个方法签名，方法名相同但参数不同。 重写用于子类中重新定义父类已有的方法，方法名、参数列表和返回类型必须完全一致。 重载和重写是面向对象编程的重要特性，它们共同为代码的灵活性和可维护性提供了支持。</p><p>数组是一种用于存储一组相同类型元素的数据结构。实例化数组意味着创建数组对象并分配内存空间，以便可以存储元素。以下是几种常见的数组实例化方式：</p><h3 id="_1-3-数组实例化有几种方式" tabindex="-1"><a class="header-anchor" href="#_1-3-数组实例化有几种方式" aria-hidden="true">#</a> 1.3 数组实例化有几种方式？</h3><hr><p><strong>静态初始化：</strong></p><p>在静态初始化中，您可以在声明数组变量的同时为数组分配内存空间并初始化元素。这种方式适用于您已经知道数组的元素值的情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态初始化：</strong></p><p>动态初始化是在声明数组变量后，通过使用 new 关键字为数组分配内存空间，并随后分配初始值给数组元素。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配包含 5 个整数元素的数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配包含 3 个字符串元素的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多维数组初始化：</strong></p><p>多维数组可以在声明的同时进行静态初始化或动态初始化，实例化多维数组需要指定每个维度的大小。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 3x3 整数矩阵</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ticTacToe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 3x3 字符矩阵</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匿名数组：</strong> 在某些情况下，您可以使用匿名数组进行一次性的操作，无需显式声明数组变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印并实例化匿名整数数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-java-中各种数据默认值" tabindex="-1"><a class="header-anchor" href="#_1-4-java-中各种数据默认值" aria-hidden="true">#</a> 1.4 Java 中各种数据默认值</h3><hr><p>在Java中，各种数据类型在被声明但尚未被初始化的情况下会被赋予默认值。以下是Java中各种数据类型的默认值：</p><p>数值类型（整数和浮点数）：</p><ul><li>byte: 0</li><li>short: 0</li><li>int: 0</li><li>long: 0L</li><li>float: 0.0f</li><li>double: 0.0</li></ul><p>字符类型：</p><ul><li>char: &#39;\\u0000&#39;，即Unicode中的空字符</li></ul><p>布尔类型：</p><ul><li>boolean: false</li></ul><p>引用类型（类、接口、数组）：</p><ul><li>对象引用类型（如类、接口）：null</li><li>数组引用类型：null</li></ul><p>需要注意的是，这些默认值是在变量被声明但尚未被显式初始化时所具有的初始值。当创建一个新的变量时，如果不为其赋值，它们将自动获得这些默认值。</p><p>例如，以下代码片段展示了各种数据类型的默认值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultValuesExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span> b<span class="token punctuation">;</span>
    <span class="token keyword">short</span> s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">long</span> l<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f<span class="token punctuation">;</span>
    <span class="token keyword">double</span> d<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> bool<span class="token punctuation">;</span>
    <span class="token class-name">String</span> str<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultValuesExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultValuesExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;byte: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;short: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;int: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;long: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;float: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;double: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;char: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;boolean: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String: &quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-object-类常用方法有那些" tabindex="-1"><a class="header-anchor" href="#_1-5-object-类常用方法有那些" aria-hidden="true">#</a> 1.5 Object 类常用方法有那些？</h3><hr><p>java.lang.Object 类是所有Java类的根类，它包含了一些常用的方法，这些方法可以被任何类继承和使用。以下是Object 类中一些常用的方法：</p><p><strong>equals(Object obj)：</strong> 用于比较两个对象是否相等。默认情况下，equals 方法比较的是对象的引用是否相同，但可以在子类中重写该方法以自定义对象相等的条件。</p><p><strong>hashCode()：</strong> 返回对象的哈希码值。哈希码通常用于在集合（如哈希表）中快速定位对象。对于相等的对象，它们的哈希码应该相同，但相同哈希码的对象不一定相等。</p><p><strong>toString()：</strong> 返回对象的字符串表示。默认情况下，toString 方法返回包含类名和哈希码的字符串。它通常会被重写以提供更有用的对象描述。</p><p><strong>getClass()：</strong> 返回对象的运行时类的引用，即对象所属的类。可以用于获取对象的类信息。</p><p><strong>finalize()：</strong> 在对象被垃圾回收之前，系统会调用该方法。通常情况下，不推荐使用该方法，而是使用AutoCloseable接口或者try-with-resources来确保资源的释放。</p><p><strong>notify()、notifyAll()、wait()：</strong> 用于支持线程之间的通信和协调。这些方法通常与wait()、notify()和notifyAll()结合使用，以实现多线程之间的同步。</p><p><strong>clone()：</strong> 创建并返回当前对象的浅拷贝（副本）。需要注意的是，为了正确实现对象的拷贝，被复制的对象需要实现Cloneable接口。</p><h3 id="_1-6-java-中是值传递引用传递" tabindex="-1"><a class="header-anchor" href="#_1-6-java-中是值传递引用传递" aria-hidden="true">#</a> 1.6 java 中是值传递引用传递？</h3><hr><p>Java 中是<strong>值传递（Pass-by-Value）</strong>。这意味着当你将一个参数传递给方法时，实际上传递的是参数的值（即引用的副本），而不是原始引用本身。这可能在处理基本数据类型和对象引用时产生不同的效果。</p><p>对于基本数据类型（如整数、浮点数等），传递的是实际的值，方法内对参数的修改不会影响调用处的变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Copy</span> code
<span class="token keyword">void</span> <span class="token function">modifyValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">modifyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但对于对象引用，传递的是引用的副本，这意味着方法内的操作可能会影响调用处的对象，但不会改变原始引用指向的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Copy</span> code
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">modifyReference</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
    person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">modifyReference</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Alice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，虽然在方法内部修改了 person 对象的 name 属性，但在方法内部重新分配了一个新的 Person 对象，所以方法结束后，调用处的 person 仍然指向原来的对象。</p>`,60),k=n("h3",{id:"_1-7-形参与实参区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-7-形参与实参区别","aria-hidden":"true"},"#"),s(" 1.7 形参与实参区别")],-1),d=n("hr",null,null,-1);function m(v,b){const a=u("font");return p(),e("div",null,[r,n("p",null,[s("总结：Java 中是值传递，对于基本数据类型，传递的是实际值；对于对象引用，传递的是引用的副本，方法内的操作可能影响调用处的对象，"),o(a,{color:"red"},{default:c(()=>[s("但不会改变原始引用指向的对象。")]),_:1})]),k,d])}const g=t(i,[["render",m],["__file","interview-2023.html.vue"]]);export{g as default};
